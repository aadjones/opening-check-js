---
description: 
globs: 
alwaysApply: false
---
# Database: Create functions

You're a Supabase Postgres expert in writing database functions. Generate **high-quality PostgreSQL functions** that adhere to the following best practices:

## General Guidelines

1. **Default to `SECURITY INVOKER`:**
   - Functions should run with the permissions of the user invoking the function, ensuring safer access control.
   - Use `SECURITY DEFINER` only when explicitly required and explain the rationale.

2. **Set the `search_path` Configuration Parameter:**
   - Always set `search_path` to an empty string (`set search_path = '';`).
   - This avoids unexpected behavior and security risks caused by resolving object references in untrusted or unintended schemas.
   - Use fully qualified names (e.g., `schema_name.table_name`) for all database objects referenced within the function.

3. **Adhere to SQL Standards and Validation:**
   - Ensure all queries within the function are valid PostgreSQL SQL queries and compatible with Supabase.

## Best Practices

1. **Minimize Side Effects:**
   - Prefer functions that return results over those that modify data unless they serve a specific purpose (e.g., triggers).

2. **Use Explicit Typing:**
   - Clearly specify input and output types, avoiding ambiguous or loosely typed parameters.

3. **Default to Immutable or Stable Functions:**
   - Where possible, declare functions as `IMMUTABLE` or `STABLE` to allow better optimization by PostgreSQL. Use `VOLATILE` only if the function modifies data or has side effects.

4. **Triggers (if Applicable):**
   - If the function is used as a trigger, include a valid `CREATE TRIGGER` statement that attaches the function to the desired table and event (e.g., `BEFORE INSERT`).

## Example Templates

### Simple Function with `SECURITY INVOKER`
```sql
create or replace function public.hello_world()
returns text
language plpgsql
security invoker
set search_path = ''
as $$
begin
  return 'hello world';
end;
$$;
```

### Function with Parameters and Fully Qualified Object Names
```sql
create or replace function public.get_next_reviews(user_uuid UUID, limit_count INTEGER DEFAULT 10)
returns table (
    deviation_id UUID,
    game_url VARCHAR,
    played_move VARCHAR,
    expected_move VARCHAR,
    fen_before_deviation TEXT
)
language plpgsql
security invoker
set search_path = ''
as $$
begin
    return query
    select d.id, d.game_url, d.played_move, d.expected_move, d.fen_before_deviation
    from public.deviations d
    join public.users u on d.user_id = u.id
    where u.auth_user_id = user_uuid
      and d.next_review_date <= now()
      and d.is_resolved = false
    order by d.next_review_date asc
    limit limit_count;
end;
$$;
```

### Function as a Trigger
```sql
create or replace function public.update_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  -- Update the "updated_at" column on row modification
  new.updated_at := now();
  return new;
end;
$$;

create trigger update_updated_at_trigger
before update on public.users
for each row
execute function public.update_updated_at();
```

### Function with Error Handling
```sql
create or replace function public.calculate_spaced_repetition(
    current_ease_factor DECIMAL,
    review_result VARCHAR,
    current_interval INTEGER
)
returns table (
    new_ease_factor DECIMAL,
    new_interval INTEGER,
    next_review_date TIMESTAMP
)
language plpgsql
security invoker
set search_path = ''
as $$
declare
    ease_factor DECIMAL := current_ease_factor;
    interval_days INTEGER := current_interval;
begin
    if review_result not in ('correct', 'incorrect', 'skip') then
        raise exception 'Invalid review result. Must be correct, incorrect, or skip';
    end if;

    -- SM-2 algorithm implementation
    case review_result
        when 'correct' then
            ease_factor := greatest(1.3, ease_factor + 0.1);
            interval_days := ceil(interval_days * ease_factor);
        when 'incorrect' then
            ease_factor := greatest(1.3, ease_factor - 0.2);
            interval_days := 1;
        when 'skip' then
            -- No change to ease factor, slight increase to interval
            interval_days := greatest(1, ceil(interval_days * 1.2));
    end case;

    return query select 
        ease_factor,
        interval_days,
        (now() + (interval_days || ' days')::interval)::timestamp;
end;
$$;
```

### Immutable Function for Better Optimization
```sql
create or replace function public.format_chess_move(move_san text, move_number integer, is_white boolean)
returns text
language sql
security invoker
set search_path = ''
immutable
as $$
  select case 
    when is_white then move_number::text || '. ' || move_san
    else move_number::text || '... ' || move_san
  end;
$$;
```

