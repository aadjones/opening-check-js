---
description: supabase edge functions
globs: 
alwaysApply: false
---
# Supabase Edge Functions

You're a Supabase Edge Functions expert. Generate **high-quality Deno/TypeScript Edge Functions** that follow these best practices:

## General Guidelines

1. **Use Deno and TypeScript:**
   - All Edge Functions run on Deno runtime
   - Use TypeScript for type safety
   - Import dependencies from deno.land or npm: specifiers

2. **CORS Handling:**
   - Always include proper CORS headers
   - Handle preflight OPTIONS requests
   - Use consistent CORS configuration

3. **Error Handling:**
   - Wrap main logic in try-catch blocks
   - Return proper HTTP status codes
   - Log errors for debugging

4. **Environment Variables:**
   - Use Deno.env.get() for environment variables
   - Never hardcode sensitive values
   - Validate required environment variables

## Basic Edge Function Template

```typescript
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Initialize Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    )

    // Your function logic here
    const { data, error } = await supabaseClient
      .from('your_table')
      .select('*')

    if (error) throw error

    return new Response(
      JSON.stringify({ data }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      },
    )

  } catch (error) {
    console.error('Error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400 
      },
    )
  }
})
```

## Chess App Specific Functions

### Game Polling Function
```typescript
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface LichessGame {
  id: string
  moves: string
  players: {
    white: { user?: { name: string } }
    black: { user?: { name: string } }
  }
  clock?: { initial: number, increment: number }
  status: string
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '', // Use service role for background tasks
    )

    // Get the user from request
    const { userId } = await req.json()
    
    // Get user's Lichess username and studies
    const { data: user } = await supabase
      .from('users')
      .select('lichess_username, white_study_id, black_study_id')
      .eq('id', userId)
      .single()

    if (!user) throw new Error('User not found')

    // Fetch recent games from Lichess API
    const lichessResponse = await fetch(
      `https://lichess.org/api/games/user/${user.lichess_username}?max=10&rated=true&pgnInJson=true`,
      {
        headers: {
          'Accept': 'application/x-ndjson',
        }
      }
    )

    if (!lichessResponse.ok) {
      throw new Error(`Lichess API error: ${lichessResponse.status}`)
    }

    const gamesText = await lichessResponse.text()
    const games: LichessGame[] = gamesText
      .split('\n')
      .filter(line => line.trim())
      .map(line => JSON.parse(line))

    // Process each game for deviations
    for (const game of games) {
      // Check if game already processed
      const { data: existingGame } = await supabase
        .from('deviations')
        .select('id')
        .eq('game_id', game.id)
        .limit(1)

      if (existingGame && existingGame.length > 0) continue

      // Analyze game for deviations (simplified)
      const deviations = await analyzeGameForDeviations(game, user)
      
      // Insert any found deviations
      if (deviations.length > 0) {
        await supabase
          .from('deviations')
          .insert(deviations)
      }
    }

    return new Response(
      JSON.stringify({ 
        message: 'Games processed successfully',
        gamesProcessed: games.length 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      },
    )

  } catch (error) {
    console.error('Game polling error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      },
    )
  }
})

async function analyzeGameForDeviations(game: LichessGame, user: any) {
  // Placeholder for deviation analysis logic
  // This would compare game moves against cached study data
  return []
}
```

### Scheduled Game Polling Function
```typescript
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
    )

    // Get all active users (last active within 24 hours)
    const { data: activeUsers } = await supabase
      .from('users')
      .select('id, lichess_username, last_active')
      .gte('last_active', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())

    if (!activeUsers) {
      return new Response(
        JSON.stringify({ message: 'No active users found' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200 
        },
      )
    }

    let processedCount = 0
    
    // Process each user with rate limiting
    for (const user of activeUsers) {
      try {
        // Call the individual user polling function
        const response = await fetch(`${Deno.env.get('SUPABASE_URL')}/functions/v1/poll-user-games`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${Deno.env.get('SUPABASE_ANON_KEY')}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId: user.id })
        })

        if (response.ok) {
          processedCount++
        }

        // Rate limiting - wait 1 second between requests to respect Lichess API limits
        await new Promise(resolve => setTimeout(resolve, 1000))
        
      } catch (error) {
        console.error(`Error processing user ${user.id}:`, error)
      }
    }

    return new Response(
      JSON.stringify({ 
        message: `Scheduled polling completed`,
        activeUsers: activeUsers.length,
        processedUsers: processedCount
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      },
    )

  } catch (error) {
    console.error('Scheduled polling error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      },
    )
  }
})
```

### Study Cache Refresh Function
```typescript
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { studyId } = await req.json()
    
    if (!studyId) {
      throw new Error('Study ID is required')
    }

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
    )

    // Fetch study data from Lichess
    const lichessResponse = await fetch(
      `https://lichess.org/api/study/${studyId}.pgn`,
      {
        headers: {
          'Accept': 'application/x-chess-pgn',
        }
      }
    )

    if (!lichessResponse.ok) {
      throw new Error(`Failed to fetch study: ${lichessResponse.status}`)
    }

    const pgnData = await lichessResponse.text()
    
    // Parse PGN and convert to our internal format
    const studyData = parsePGNToStudyData(pgnData)

    // Update or insert study cache
    const { error } = await supabase
      .from('studies_cache')
      .upsert({
        study_id: studyId,
        study_data: studyData,
        last_updated: new Date().toISOString(),
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours
      })

    if (error) throw error

    return new Response(
      JSON.stringify({ 
        message: 'Study cache updated successfully',
        studyId,
        chapters: studyData.chapters?.length || 0
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      },
    )

  } catch (error) {
    console.error('Study cache refresh error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      },
    )
  }
})

function parsePGNToStudyData(pgn: string) {
  // Placeholder for PGN parsing logic
  // This would convert PGN format to our internal study tree structure
  return {
    chapters: [],
    moves: {},
    metadata: {}
  }
}
```

## Best Practices

1. **Rate Limiting:**
   - Respect API limits (Lichess: 1 req/sec)
   - Implement delays between requests
   - Use exponential backoff for retries

2. **Caching:**
   - Cache frequently accessed data
   - Set appropriate expiration times
   - Use database for persistent caching

3. **Monitoring:**
   - Log important events and errors
   - Include request/response timing
   - Monitor function execution duration

4. **Security:**
   - Validate all inputs
   - Use service role key for privileged operations
   - Never expose sensitive data in responses

5. **Performance:**
   - Minimize external API calls
   - Use connection pooling when possible
   - Process data in batches when appropriate

