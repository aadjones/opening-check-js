---
description:
globs:
alwaysApply: false
---
# FastAPI Python Development

You're a FastAPI and Python expert. Generate **high-quality FastAPI applications** that follow these best practices:

## General Guidelines

1. **Use Type Hints:**
   - Use Pydantic models for request/response validation
   - Type all function parameters and return values
   - Leverage Python 3.9+ type hints

2. **Code Structure:**
   - Organize code into logical modules
   - Use dependency injection for common patterns
   - Follow RESTful API design principles

3. **Error Handling:**
   - Use HTTPException for API errors
   - Implement proper error responses
   - Log errors appropriately

## Basic FastAPI Structure

### Main Application Setup
```python
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Chess Opening Deviation Analyzer",
    description="API for analyzing chess opening deviations",
    version="1.0.0"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],  # Frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
async def health_check():
    return {"status": "healthy"}
```

### Pydantic Models
```python
from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from enum import Enum

class ReviewType(str, Enum):
    CORRECT = "correct"
    INCORRECT = "incorrect"
    SKIP = "skip"

class UserBase(BaseModel):
    lichess_username: str = Field(..., min_length=1, max_length=50)
    white_study_id: Optional[str] = Field(None, max_length=20)
    black_study_id: Optional[str] = Field(None, max_length=20)

class UserCreate(UserBase):
    lichess_user_id: str = Field(..., max_length=20)

class UserResponse(UserBase):
    id: str
    created_at: datetime
    last_active: datetime

class DeviationBase(BaseModel):
    game_id: str = Field(..., max_length=20)
    game_url: str = Field(..., max_length=100)
    move_number: int = Field(..., gt=0)
    player_color: str = Field(..., regex="^(white|black)$")
    played_move: str = Field(..., max_length=10)
    expected_move: str = Field(..., max_length=10)
    fen_before_deviation: str
    opening_name: Optional[str] = Field(None, max_length=100)
    chapter_name: Optional[str] = Field(None, max_length=100)
    time_control: Optional[str] = Field(None, max_length=20)
    game_result: Optional[str] = Field(None, max_length=10)

class DeviationCreate(DeviationBase):
    user_id: str

class DeviationResponse(DeviationBase):
    id: str
    user_id: str
    created_at: datetime
    review_count: int
    ease_factor: float
    interval_days: int
    next_review_date: datetime
    last_reviewed: Optional[datetime]
    is_resolved: bool

class ReviewCreate(BaseModel):
    deviation_id: str
    review_type: ReviewType
    time_spent_seconds: Optional[int] = Field(None, ge=0)

class ReviewResponse(BaseModel):
    id: str
    deviation_id: str
    user_id: str
    review_type: ReviewType
    time_spent_seconds: Optional[int]
    reviewed_at: datetime
```

### Dependencies
```python
from fastapi import Depends, HTTPException, status
from supabase import create_client, Client
import os

def get_supabase_client() -> Client:
    url = os.getenv("SUPABASE_URL")
    key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
    
    if not url or not key:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Supabase configuration missing"
        )
    
    return create_client(url, key)

async def get_current_user(
    supabase: Client = Depends(get_supabase_client),
    authorization: str = Header(None)
):
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Missing or invalid authorization header"
        )
    
    token = authorization.split(" ")[1]
    
    try:
        # Verify JWT token with Supabase
        user = supabase.auth.get_user(token)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token"
            )
        return user
    except Exception as e:
        logger.error(f"Auth error: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authentication failed"
        )
```

### API Routes
```python
from fastapi import APIRouter, Depends, HTTPException, status, Query
from typing import List, Optional

router = APIRouter(prefix="/api", tags=["api"])

@router.get("/user/profile", response_model=UserResponse)
async def get_user_profile(
    current_user=Depends(get_current_user),
    supabase: Client = Depends(get_supabase_client)
):
    """Get current user's profile"""
    try:
        response = supabase.table("users").select("*").eq(
            "auth_user_id", current_user.id
        ).single().execute()
        
        if not response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="User profile not found"
            )
        
        return UserResponse(**response.data)
    except Exception as e:
        logger.error(f"Error fetching user profile: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to fetch user profile"
        )

@router.put("/user/studies")
async def update_user_studies(
    white_study_id: Optional[str] = None,
    black_study_id: Optional[str] = None,
    current_user=Depends(get_current_user),
    supabase: Client = Depends(get_supabase_client)
):
    """Update user's study selections"""
    try:
        update_data = {}
        if white_study_id is not None:
            update_data["white_study_id"] = white_study_id
        if black_study_id is not None:
            update_data["black_study_id"] = black_study_id
        
        if not update_data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No study IDs provided"
            )
        
        response = supabase.table("users").update(update_data).eq(
            "auth_user_id", current_user.id
        ).execute()
        
        return {"message": "Studies updated successfully"}
    except Exception as e:
        logger.error(f"Error updating studies: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update studies"
        )

@router.get("/deviations", response_model=List[DeviationResponse])
async def get_deviations(
    limit: int = Query(10, ge=1, le=100),
    offset: int = Query(0, ge=0),
    resolved: Optional[bool] = Query(None),
    current_user=Depends(get_current_user),
    supabase: Client = Depends(get_supabase_client)
):
    """Get user's deviations with pagination"""
    try:
        # Get user ID first
        user_response = supabase.table("users").select("id").eq(
            "auth_user_id", current_user.id
        ).single().execute()
        
        if not user_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="User not found"
            )
        
        user_id = user_response.data["id"]
        
        # Build query
        query = supabase.table("deviations").select("*").eq("user_id", user_id)
        
        if resolved is not None:
            query = query.eq("is_resolved", resolved)
        
        response = query.order("created_at", desc=True).range(
            offset, offset + limit - 1
        ).execute()
        
        return [DeviationResponse(**item) for item in response.data]
    except Exception as e:
        logger.error(f"Error fetching deviations: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to fetch deviations"
        )

@router.post("/deviations/{deviation_id}/review")
async def submit_review(
    deviation_id: str,
    review: ReviewCreate,
    current_user=Depends(get_current_user),
    supabase: Client = Depends(get_supabase_client)
):
    """Submit a review for a deviation"""
    try:
        # Get user ID
        user_response = supabase.table("users").select("id").eq(
            "auth_user_id", current_user.id
        ).single().execute()
        
        user_id = user_response.data["id"]
        
        # Verify user owns the deviation
        deviation_response = supabase.table("deviations").select("*").eq(
            "id", deviation_id
        ).eq("user_id", user_id).single().execute()
        
        if not deviation_response.data:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Deviation not found"
            )
        
        deviation = deviation_response.data
        
        # Calculate new spaced repetition values
        new_values = calculate_spaced_repetition(
            deviation["ease_factor"],
            review.review_type.value,
            deviation["interval_days"]
        )
        
        # Update deviation
        update_data = {
            "review_count": deviation["review_count"] + 1,
            "ease_factor": new_values["ease_factor"],
            "interval_days": new_values["interval_days"],
            "next_review_date": new_values["next_review_date"].isoformat(),
            "last_reviewed": datetime.utcnow().isoformat(),
            "is_resolved": review.review_type == ReviewType.CORRECT and deviation["review_count"] >= 2
        }
        
        supabase.table("deviations").update(update_data).eq("id", deviation_id).execute()
        
        # Insert review record
        review_data = {
            "deviation_id": deviation_id,
            "user_id": user_id,
            "review_type": review.review_type.value,
            "time_spent_seconds": review.time_spent_seconds
        }
        
        supabase.table("reviews").insert(review_data).execute()
        
        return {"message": "Review submitted successfully"}
    except Exception as e:
        logger.error(f"Error submitting review: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to submit review"
        )

@router.get("/queue", response_model=List[DeviationResponse])
async def get_review_queue(
    limit: int = Query(10, ge=1, le=50),
    current_user=Depends(get_current_user),
    supabase: Client = Depends(get_supabase_client)
):
    """Get items due for review"""
    try:
        # Use database function for efficient querying
        response = supabase.rpc(
            "get_next_reviews",
            {"user_uuid": current_user.id, "limit_count": limit}
        ).execute()
        
        return [DeviationResponse(**item) for item in response.data]
    except Exception as e:
        logger.error(f"Error fetching review queue: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to fetch review queue"
        )

# Include router in main app
app.include_router(router)
```

### Utility Functions
```python
from datetime import datetime, timedelta
from typing import Dict, Any

def calculate_spaced_repetition(
    current_ease_factor: float,
    review_result: str,
    current_interval: int
) -> Dict[str, Any]:
    """
    Calculate new spaced repetition values using SM-2 algorithm
    """
    ease_factor = current_ease_factor
    interval_days = current_interval
    
    if review_result == "correct":
        ease_factor = max(1.3, ease_factor + 0.1)
        interval_days = max(1, int(interval_days * ease_factor))
    elif review_result == "incorrect":
        ease_factor = max(1.3, ease_factor - 0.2)
        interval_days = 1
    elif review_result == "skip":
        # No change to ease factor, slight increase to interval
        interval_days = max(1, int(interval_days * 1.2))
    
    next_review_date = datetime.utcnow() + timedelta(days=interval_days)
    
    return {
        "ease_factor": ease_factor,
        "interval_days": interval_days,
        "next_review_date": next_review_date
    }

async def fetch_lichess_games(username: str, max_games: int = 10) -> List[Dict]:
    """
    Fetch recent games from Lichess API
    """
    import httpx
    
    url = f"https://lichess.org/api/games/user/{username}"
    params = {
        "max": max_games,
        "rated": "true",
        "pgnInJson": "true"
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, params=params, timeout=10.0)
            response.raise_for_status()
            
            # Parse NDJSON response
            games = []
            for line in response.text.strip().split('\n'):
                if line:
                    games.append(json.loads(line))
            
            return games
    except Exception as e:
        logger.error(f"Error fetching Lichess games: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to fetch games from Lichess"
        )
```

### Background Tasks
```python
from fastapi import BackgroundTasks
import asyncio

@router.post("/games/poll")
async def poll_user_games(
    background_tasks: BackgroundTasks,
    current_user=Depends(get_current_user),
    supabase: Client = Depends(get_supabase_client)
):
    """Trigger polling of user's recent games"""
    background_tasks.add_task(poll_games_task, current_user.id, supabase)
    return {"message": "Game polling started"}

async def poll_games_task(user_id: str, supabase: Client):
    """Background task to poll and analyze games"""
    try:
        # Get user data
        user_response = supabase.table("users").select(
            "lichess_username, white_study_id, black_study_id"
        ).eq("auth_user_id", user_id).single().execute()
        
        if not user_response.data:
            logger.error(f"User not found: {user_id}")
            return
        
        user = user_response.data
        
        # Fetch recent games
        games = await fetch_lichess_games(user["lichess_username"])
        
        # Process each game for deviations
        for game in games:
            await process_game_for_deviations(game, user, supabase)
        
        logger.info(f"Processed {len(games)} games for user {user_id}")
    except Exception as e:
        logger.error(f"Error in poll_games_task: {e}")

async def process_game_for_deviations(game: Dict, user: Dict, supabase: Client):
    """Analyze a single game for opening deviations"""
    # This would contain the chess analysis logic
    # Placeholder for now
    pass
```

## Best Practices

1. **Error Handling:**
   - Use appropriate HTTP status codes
   - Provide clear error messages
   - Log errors with sufficient context

2. **Security:**
   - Validate all inputs with Pydantic
   - Use proper authentication and authorization
   - Sanitize database queries

3. **Performance:**
   - Use async/await for I/O operations
   - Implement proper database indexing
   - Use background tasks for long-running operations

4. **Testing:**
   - Write unit tests for all endpoints
   - Use pytest and httpx for testing
   - Mock external API calls

5. **Documentation:**
   - Use FastAPI's automatic documentation
   - Add clear docstrings to functions
   - Provide example requests/responses
